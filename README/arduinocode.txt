#ifdef ESP32
#include <WiFi.h>
#include <HTTPClient.h>
#else
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <base64.h>
#include <WiFiClient.h>
#endif

#include <DHT.h>
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// Twilio Account SID and Auth Token
const char* accountSID = "AC4452870f01bb0a28296687cd6a6418fc";
const char* authToken = "0445d712aee52ba13fde803ebca6163b";
// Twilio Phone Number (Sender)
const char* twilioPhoneNumber = "+19136745677";
const char* recipientPhoneNumber = "+639913775322"; // recipient phone number

//phlevel
float resolution;
int measurings;
float voltage;
float pHvalue;
float b = 0.00;
float m = 2.0;

const char* ssid = "Jane";
const char* password = "password123";
const char* serverName = "http://192.168.172.246/ProjectSystem_v2/post-esp-data.php";
const char* server = "api.thingspeak.com";
String apiKeyValue = "tPmAT5Ab3j7F9";
String sensorName = "Agri";
String sensorLocation = "Agri";

// DHT11 Sensor for inside
#define DHTPIN_INSIDE D2
#define DHTTYPE_INSIDE DHT22
DHT dht_inside(DHTPIN_INSIDE, DHTTYPE_INSIDE);

// DHT11 Sensor for outside
#define DHTPIN_OUTSIDE D4
#define DHTTYPE_OUTSIDE DHT11
DHT dht_outside(DHTPIN_OUTSIDE, DHTTYPE_OUTSIDE);

// DS18B20 Temperature Sensor
const int SENSOR_PIN = D5; //water
OneWire oneWire(SENSOR_PIN);         // setup a oneWire instance
DallasTemperature tempSensor(&oneWire); // pass oneWire to DallasTemperature library
int buzzerPin = D7;//buzzer
const int analogPin = D0; //ph
const float VREF = 3.0;
const int CONDUCTIVITY_PIN = A0;
const float CALIBRATION_FACTOR = 1.0;
WiFiClient client;
HTTPClient http;

float temperature;
float humidity;
float temperature1;
float humidity1;
float tempCelsius;
float tempFahrenheit;
float conductivity;


int relayPin = D6; 

void setup() {
  Serial.begin(115200);
  resolution = 1024.0;

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  Serial.println(WiFi.localIP());
  resolution = 1024.0;

  dht_inside.begin();
  dht_outside.begin();
  tempSensor.begin();

  // Set the relay pin as an OUTPUT
   pinMode(relayPin, OUTPUT);
  // Initially, turn the relay off
  digitalWrite(relayPin, HIGH);
  pinMode(buzzerPin, OUTPUT);
}

void loop() {
  // Check WiFi connection status
  if (WiFi.status() == WL_CONNECTED) {
    http.begin(client, serverName);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    temperature = dht_inside.readTemperature();
    humidity = dht_inside.readHumidity();
    temperature1 = dht_outside.readTemperature();
    humidity1 = dht_outside.readHumidity();

    // check for error
    if (isnan(temperature1) || isnan(humidity1) || isnan(temperature) || isnan(humidity)) {
      sendSensorErrorSMS();
    }

    // inside
    if (temperature >= 35) {
     sendTemperatureAlert(temperature);
         beep(); 
   delay(1000);
    digitalWrite(relayPin, HIGH);
    }else {
      digitalWrite(relayPin, LOW);
    }
    if (humidity > 70) {
      sendHumidityAlert(humidity);
           beep(); 
   delay(1000);
         digitalWrite(relayPin, HIGH);
    }else {
      digitalWrite(relayPin, LOW);
    }

    // outside
    if (temperature1 >= 45) {
      sendTemperature1Alert(temperature1);
           beep(); 
        delay(1000);
  digitalWrite(relayPin, HIGH);
    }else {
        digitalWrite(relayPin, LOW);
    }
    if (humidity1 > 90) {
      sendHumidity1Alert(humidity1);
        beep(); 
        delay(1000);
        digitalWrite(relayPin, HIGH);
    }else {
        digitalWrite(relayPin, LOW);
    }

    measurings = 0;
   for (int i = 0; i < 10; i++)                   
  {
    measurings = measurings + analogRead(D0);     
    delay(10);                                  
  }
    voltage = ((5 / resolution) * (measurings/10));        
    pHvalue = ((7 + ((2.5 - voltage) / m)))+ b;

    Serial.print("pH= ");
    Serial.println(pHvalue);

   // Check pH value
if (isnan(pHvalue)) {
 sendphSensorErrorSMS();
} else if (pHvalue > 8.5) {
  sendPHAlert(pHvalue);
   beep(); 
   delay(1000);
    digitalWrite(relayPin, HIGH);
}  else {

  digitalWrite(relayPin, LOW);
}

  

    int sensorValue = analogRead(CONDUCTIVITY_PIN);
    Serial.print("sensorValue: ");
    Serial.println(sensorValue);
    float voltage = (sensorValue / 1023.0) * VREF;
    // Calculate the conductivity in microsiemens per centimeter (uS/cm)
    float conductivity = voltage * CALIBRATION_FACTOR;
    // Print the conductivity value on the serial monitor
    Serial.print("Water Conductivity: ");
    Serial.println(conductivity);

    // Check conductivity levels
    if (conductivity == 0.00) {
      // Send an alert indicating that conductivity is not working
      sendConductivityErrorSMS();
    } else if (conductivity > 1.50) {
     beep(); 
     delay(1000);
     digitalWrite(relayPin, HIGH);
      sendConductivityAboveNormalAlert(conductivity);
    } else {
     digitalWrite(relayPin, LOW);
    
    }

    tempSensor.requestTemperatures();
    tempCelsius = tempSensor.getTempCByIndex(0);
    tempFahrenheit = tempCelsius * 9 / 5 + 32;

    // Check water temperature levels
    if (isnan(tempCelsius)) {
      // Send an alert indicating that water temperature is not working
      sendWaterTemperatureErrorSMS();
    } else if (tempCelsius > 35.0) {
     
     beep(); 
     delay(1000);
     digitalWrite(relayPin, HIGH);
      sendWaterTemperatureAboveNormalAlert(tempCelsius);
    } else {
     digitalWrite(relayPin, LOW);
     
    }

    // Control the relay based on temperature
 

    String httpRequestData = "api_key=" + apiKeyValue + "&sensor=" + sensorName +
                            "&location=" + sensorLocation + "&temperature=" + String(temperature) +
                            "&humidity=" + String(humidity) + "&temperature1=" + String(temperature1) +
                            "&humidity1=" + String(humidity1) + "&tempCelsius=" + String(tempCelsius) +
                            "&pHvalue=" + String(pHvalue) + "&conductivity=" + String(conductivity);
    Serial.print("httpRequestData: ");
    Serial.println(httpRequestData);

    Serial.print("pH= ");
    Serial.println(pHvalue);
    delay(1000);

    int httpResponseCode = http.POST(httpRequestData);

    if (httpResponseCode > 0) {
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);
    } else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }
  delay(1000);
}
void beep() {
  for (int i = 0; i < 3; i++) {
    // Turn the buzzer on
    digitalWrite(buzzerPin, HIGH);
    delay(500); // Buzz for 0.5 seconds

    // Turn the buzzer off
    digitalWrite(buzzerPin, LOW);
    delay(500); // Wait for 0.5 seconds
  }
}
void sendSensorErrorSMS() {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: DHT11 Sensor is not working. Please check the sensor.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendTemperatureAlert(float temperature) {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: The temperature in the AgriFresh is " + String(temperature) + " degrees Celsius. Please take necessary action.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendHumidityAlert(float humidity) {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: The humidity in the AgriFresh is " + String(humidity) + "%. Please take necessary action.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendTemperature1Alert(float temperature1) {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: The temperature in the AgriFresh is " + String(temperature1) + " degrees Celsius. Please take necessary action.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendHumidity1Alert(float humidity) {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: The humidity in the AgriFresh is " + String(humidity1) + "%. Please take necessary action.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}
//ph
void sendPHAlert(float pHvalue) {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
 String message = "Attention: The phLevel in the AgriFresh is " + String(pHvalue) + "%. Please take necessary action.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendphSensorErrorSMS() {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
   String message = "Attention: The phLevel in the AgriFresh is NOT working. Kindly Check";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendConductivityErrorSMS() {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request for conductivity error
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: Conductivity sensor is not working. Please check the sensor.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendConductivityAboveNormalAlert(float conductivity) {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request for above normal conductivity
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: Conductivity is above normal. Current Conductivity: " + String(conductivity) + " uS/cm.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}


void sendWaterTemperatureErrorSMS() {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request for water temperature error
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: Water temperature sensor is not working. Please check the sensor.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

void sendWaterTemperatureAboveNormalAlert(float tempCelsius) {
  WiFiClientSecure client;
  client.setInsecure();

  // Prepare Twilio API request for above normal water temperature
  String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
  String message = "Attention: Water temperature is above normal. Current Temperature: " + String(tempCelsius) + "°C.";
  String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

  // Send Twilio API request
  if (client.connect("api.twilio.com", 443)) {
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: api.twilio.com");
    client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(data.length());
    client.println();
    client.println(data);
  }
  client.stop();
}

// void sendWaterTemperatureBelowNormalAlert(float tempCelsius) {
//   WiFiClientSecure client;
//   client.setInsecure();

//   // Prepare Twilio API request for below normal water temperature
//   String url = "https://api.twilio.com/2010-04-01/Accounts/" + String(accountSID) + "/Messages.json";
//   String message = "Attention: Water temperature is below normal. Current Temperature: " + String(tempCelsius) + "°C.";
//   String data = "To=" + String(recipientPhoneNumber) + "&From=" + String(twilioPhoneNumber) + "&Body=" + message;

//   // Send Twilio API request
//   if (client.connect("api.twilio.com", 443)) {
//     client.println("POST " + url + " HTTP/1.1");
//     client.println("Host: api.twilio.com");
//     client.println("Authorization: Basic " + String(base64::encode(String(accountSID) + ":" + String(authToken))));
//     client.println("Content-Type: application/x-www-form-urlencoded");
//     client.print("Content-Length: ");
//     client.println(data.length());
//     client.println();
//     client.println(data);
//   }
//   client.stop();
// }
